# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1

# ###############################################################
# Commands
commands:
  attach_repo:
    steps:
      - attach_workspace:
          at: ~/inspectit
  build_and_test_agent:
    steps:
      - run: cd repo && ./gradlew assemble
      - run: cd repo && ./gradlew test
      - run: cd repo && ./gradlew systemTest
      - store_test_results:
          path: ~/inspectit/repo/inspectit-ocelot-agent/build/test-results
      - store_test_results:
          path: ~/inspectit/repo/inspectit-ocelot-core/build/test-results
      - store_test_results:
          path: ~/inspectit/repo/inspectit-ocelot-config/build/test-results
      - store_test_results:
          path: ~/inspectit/repo/components/inspectit-ocelot-configurationserver/build/test-results
      - store_test_results:
          path: ~/inspectit/repo/components/inspectit-ocelot-eum-server/build/test-results

# ###############################################################
# Jobs
jobs:
  # Job for checking out the source code to build and test
  checkout:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/inspectit
    steps:
      - checkout:
          path: ~/inspectit/repo
      - run:
          name: Commit Message Validation
          command: |
            message=$(git log --format=%B -n 1 $CIRCLE_SHA1);  if  [[  ( ! $message =~ .*#[0-9].*) || ( $message =~ Closes[[:space:]]#[0-9]*[[:space:]]-[[:space:]].* ) ]]; then echo "commit ok"; exit 0; else echo "commit is shit"; exit 1; fi
      - persist_to_workspace:
          root: ~/inspectit
          paths:
            - repo

  # Testing on OpenJDK 8
  sys-openjdk8: &base_test_job
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/inspectit
    steps:
      - attach_repo
      - build_and_test_agent

  # Testing on OpenJDK 9
  sys-openjdk9:
    <<: *base_test_job
    docker:
      - image: circleci/openjdk:9-jdk

  # Testing on OpenJDK 11
  sys-openjdk11:
    <<: *base_test_job
    docker:
      - image: circleci/openjdk:11-jdk

  # Testing on IBM JDK 8
  sys-ibmjava8:
    <<: *base_test_job
    docker:
      - image: ibmcom/ibmjava:8-sdk

  # Testing on Oracle JDK 8 - this test will also generate the code coverage report
  sys-oracle8-codecov:
    <<: *base_test_job
    docker:
      - image: sgrio/java:jdk_8_ubuntu
    working_directory: ~/inspectit
    steps:
      - attach_repo
      - build_and_test_agent
      - run: cd repo && ./gradlew codeCoverageReport
      - run: cd repo && bash <(curl -s https://codecov.io/bash) -y ./codecov.yml

  # Testing on Oracle JDK 11
  sys-oracle11:
    <<: *base_test_job
    docker:
      - image: sgrio/java:jdk_11_ubuntu

  # Testing on AdoptOpenJDK
  sys-adoptjdk8:
    <<: *base_test_job
    docker:
      - image: adoptopenjdk/openjdk8:latest

  # Testing the compilation of JMH tests
  jmh-compile:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/inspectit
    steps:
      - attach_workspace:
          at: ~/inspectit
      - run: cd repo && ./gradlew jmhCompile

  # Building the release artifacts (agent and demo)
  build_release_artifacts:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/inspectit
    steps:
      - attach_repo
      - run: cd repo && ./gradlew assemble bootJarWithFrontend packageDemo :inspectit-ocelot-eum-server:bootJar -PbuildVersion=${CIRCLE_TAG}
      - run: mkdir artifacts
      - run: cp ~/inspectit/repo/inspectit-ocelot-agent/build/inspectit-ocelot-agent-${CIRCLE_TAG}.jar ~/inspectit/artifacts
      - run: cp ~/inspectit/repo/inspectit-ocelot-demo/build/inspectit-ocelot-demo-${CIRCLE_TAG}.zip ~/inspectit/artifacts
      - run: cp ~/inspectit/repo/components/inspectit-ocelot-configurationserver/build/libs/inspectit-ocelot-configurationserver-${CIRCLE_TAG}.jar ~/inspectit/artifacts
      - run: cp ~/inspectit/repo/components/inspectit-ocelot-eum-server/build/libs/inspectit-ocelot-eum-server-${CIRCLE_TAG}.jar ~/inspectit/artifacts
      - persist_to_workspace:
          root: ~/inspectit
          paths:
            - artifacts

  # Generates the changelog body sued for the Github release
  generate_changelog:
    docker:
      - image: circleci/ruby:2.6.2
    working_directory: ~/inspectit
    steps:
      - attach_repo
      - run:
          command: |
            sudo apt-get install jq
            gem install bundler
            gem install rspec
            gem install github_changelog_generator
            cd repo
            chmod +x ./resources/github-release-script.sh
            ./resources/github-release-script.sh
            mkdir ~/inspectit/changelog
            cp release_body.md ~/inspectit/changelog
      - persist_to_workspace:
          root: ~/inspectit
          paths:
            - changelog

  # Publish the release artifacts to Github and updates the release
  publish_github_release:
    docker:
      - image: cibuilds/github:0.12
    working_directory: ~/inspectit
    steps:
      - attach_repo
      - run:
          name: "Publish Release on GitHub"
          command: |
            VERSION=${CIRCLE_TAG}
            BODY=$(cat ~/inspectit/changelog/release_body.md)
            ghr -t ${GITHUB_TOKEN} -u inspectIT -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n "Version ${CIRCLE_TAG}" -b "${BODY}" ${VERSION} ~/inspectit/artifacts/

  # Deploy pre-release documentation
  deploy-master-documentation:
    docker:
      - image: circleci/node:8.11.1
    working_directory: ~/inspectit
    steps:
      - attach_repo
      - run:
          name: Deploying to GitHub Pages
          working_directory: ~/inspectit/repo/inspectit-ocelot-documentation/website
          command: |
            git config --global user.email "NTTechnicalUser@users.noreply.github.com"
            git config --global user.name "NTTechnicalUser"
            echo "machine github.com login NTTechnicalUser password $GITHUB_TOKEN" > ~/.netrc
            npm install && GIT_USER=NTTechnicalUser CUSTOM_COMMIT_MESSAGE="[skip ci] Updated master documentation." npm run publish-gh-pages

  # Deploy pre-release documentation
  deploy-release-documentation:
    docker:
      - image: circleci/node:8.11.1
    working_directory: ~/inspectit
    steps:
      - run:
          name: Avoid hosts unknown for github
          command: mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - add_ssh_keys:
          fingerprints:
            - "9e:4e:80:f7:6b:34:39:48:88:02:f6:ff:40:c3:30:4c"
      - run:
          name: GitHub Login
          command: |
            git config --global user.email "NTTechnicalUser@users.noreply.github.com"
            git config --global user.name "NTTechnicalUser"
            git config --global push.default simple
            echo "machine github.com login NTTechnicalUser password $GITHUB_TOKEN" > ~/.netrc
      - run:
          name: Checkout latest master branch for documentation
          working_directory: ~/inspectit
          command: |
            git clone git@github.com:inspectIT/inspectit-ocelot.git .
      - run:
          name: Replace variables
          working_directory: ~/inspectit/inspectit-ocelot-documentation/docs
          command: |
            find . -type f -print0 | xargs -0 sed -i 's/{inspectit-ocelot-version}/'"${CIRCLE_TAG}"'/g'
            OPEN_CENSUS_VERSION=$(cat ../../gradle.properties | grep -oP '(?<=openCensusVersion=).*')
            find . -type f -print0 | xargs -0 sed -i 's/{opencensus-version}/'"${OPEN_CENSUS_VERSION}"'/g'
      - run:
          name: Create new documentation version
          working_directory: ~/inspectit/inspectit-ocelot-documentation/website
          command: |
            npm install
            npm run version ${CIRCLE_TAG}
            git add versions.json versioned_docs versioned_sidebars
            git commit -m "[skip ci] Publish documentation v${CIRCLE_TAG}"
            git push
            GIT_USER=NTTechnicalUser CUSTOM_COMMIT_MESSAGE="[skip ci] Publish documentation v${CIRCLE_TAG}" npm run publish-gh-pages

# ###############################################
# The defined workflows
workflows:
  version: 2

  # Workflow for testing and deploying master documentation
  build_and_test:
    jobs:
      - checkout
      - sys-oracle8-codecov: &requires_checkout
          requires:
            - checkout
      - sys-oracle11:
          <<: *requires_checkout
      - sys-openjdk8:
          <<: *requires_checkout
      - sys-openjdk9:
          <<: *requires_checkout
      - sys-openjdk11:
          <<: *requires_checkout
      - sys-ibmjava8:
          <<: *requires_checkout
      - sys-adoptjdk8:
          <<: *requires_checkout
      - jmh-compile:
          <<: *requires_checkout

      - deploy-master-documentation:
          requires:
            - sys-oracle8-codecov
            - sys-oracle11
            - sys-openjdk8
            - sys-openjdk9
            - sys-openjdk11
            - sys-ibmjava8
            - sys-adoptjdk8
            - jmh-compile
          filters:
            branches:
              only: master

  # Workflow for building and deploying releases based on tagged commits
  # Note: you have to manually approve the workflow on CircleCI
  release:
    jobs:
      - requesting-release-build:
          type: approval
          filters: &filter_release
            branches:
              ignore: /.*/
            tags:
              only: /\d+\.\d+(\..+)?/
      - checkout:
          filters:
            <<: *filter_release
          requires:
            - requesting-release-build
      - deploy-release-documentation:
          filters:
            <<: *filter_release
          requires:
            - checkout
      - build_release_artifacts:
          filters:
            <<: *filter_release
          requires:
            - checkout
      - generate_changelog:
          filters:
            <<: *filter_release
          requires:
            - checkout
      - publish_github_release:
          filters:
            <<: *filter_release
          requires:
            - build_release_artifacts
            - generate_changelog